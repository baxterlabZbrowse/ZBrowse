{
    "contents" : "shinyServer(function(input, output, session) {\n\n  #Load any saved datasets\n  values <- reactiveValues()\n  dataPath <- \"./www/config/data/\"\n  dataFiles <- list.files(dataPath,recursive=T)\n  for(i in dataFiles){\n     values[[i]] <- read.table(paste0(dataPath,i),sep=\",\",stringsAsFactors=FALSE,head=TRUE)     \n  }  \n  values$datasetlist <- dataFiles\n#  values[[\"ionomics\"]] <- aggTable\n#  values$datasetlist <- dataFiles\n  \n  #handles what displays in the sidebar based on what tab is selected\n  output$ui_All <- renderUI({\n    list(\n      conditionalPanel(condition = \"input.datatabs == 'Manage'\",\n         wellPanel(\n           uiOutput(\"datasets\")\n         ),                       \n         wellPanel(\n           radioButtons(inputId = \"dataType\", label = \"Load data (Max. 5MB):\", c(\".csv\" = \"csv\", \".rda\" = \"rda\", \"examples\" = \"examples\"), selected = \"csv\"),\n           conditionalPanel(condition = \"input.dataType != 'examples'\",\n                            conditionalPanel(condition = \"input.dataType == 'csv'\",\n                                             checkboxInput('header', 'Header', TRUE),\n                                             radioButtons('sep', '', c(Comma=',', Semicolon=';', Tab='\\t'), ',')                                             \n                            ),\n                            uiOutput(\"organism\"),\n                            fileInput('uploadfile', '', multiple=TRUE)\n           ),      \n           conditionalPanel(condition = \"input.dataType == 'examples'\",\n                            actionButton('loadExampleData', 'Load examples')\n           )\n         ),\n         wellPanel(\n           h6(\"Save uploaded data to the server. It will become accessible to everyone with access to the browser.\"),\n           h6(\"Once saved, it can only be deleted by an administrator.\"),\n           actionButton('saveDatasetButton', 'Save Current Dataset'),\n           conditionalPanel(condition = \"input.saveDatasetButton > 0\",\n                            h5(\"Dataset successfully saved!\")\n           )\n         ),\n         helpModal('Manage','manage',includeMarkdown(\"tools/manage.md\")),HTML('<p style=\"font-size:10px;\">Powered by <a href=\"http://www.rstudio.com/shiny/\">Shiny</a>, <a href=\"http://rcharts.io/\">rCharts</a> and <a href=\"http://www.highcharts.com\">Highcharts</a></p>')             \n      ),#end conditional Manage\n      conditionalPanel(condition = \"input.datatabs == 'Table'\",\n         wellPanel(\n           uiOutput(\"columns\"),\n           tags$br(),tags$br(),tags$br(),tags$br(),tags$br(),tags$br(), #add some space between selection columns and subset search\n           # uiOutput(\"view_order\"), checkboxInput(\"view_order_desc\", \"DESC\", value = FALSE),\n           returnTextInput(\"dv_select\", \"Subset (e.g., RMIP > 20 & Location == 'FL06')\", '')\n         ),\n         helpModal('Data Table View','view',includeMarkdown(\"tools/manage.md\"))      \n      ),#end conditional Table\n      #the second part of the statement is what is allowing the detection of changing panels due to a click event, i couldn't figure out how to update input$datatabs with javascript\n      conditionalPanel(condition = \"input.datatabs == 'panel1' || input.datatabs == 'panel2' || $('li.active a').first().html()==='Chromosome View'\",\n         helpText(h5(p(\"Interactive Graphs for GWAS Data\"))),\n         wellPanel(\n            uiOutput(\"traitColBoxes\")\n         )\n         #submitButton(\"Update View\"),\n\n      ),#end conditional for traitCols (genome view and chromosomeview)\n      conditionalPanel(condition = \"input.datatabs == 'panel2' || $('li.active a').first().html()==='Chromosome View'\",\n         wellPanel(\n            uiOutput(\"selectChr\")\n         )\n      ),#end conitional for chromsomeview (panel2)\n      conditionalPanel(condition = \"input.datatabs == 'Annot' || input.datatabs == 'panel2' || $('li.active a').first().html()==='Chromosome View'\",\n         wellPanel(\n            h5(\"Annotation window options:\"),\n            h6(\"Click a point or type a basepair value:\"),\n            uiOutput(\"selectedOut\"),\n            uiOutput(\"windowOut\")                        \n         )\n      ),#end conditional panel for Annotation plot and Table\n      conditionalPanel(condition = \"input.datatabs == 'Annot'\",\n         helpText(h5(p(paste(\"Download a CSV of the annotations in the selected window.\")))),\n         wellPanel(                        \n           downloadButton('downloadAnnot','Download')\n         )\n      ),#end conditional panel for Annotation Table\n      conditionalPanel(condition = \"input.datatabs == 'panel1' || input.datatabs == 'panel2' || $('li.active a').first().html()==='Chromosome View'\",      \n        helpModal('Browser Help','browser',includeMarkdown(\"tools/manage.md\"))        \n      )#add help button for browser tabs\n    )#end list\n  }) #end ui_All\n  outputOptions(output, \"ui_All\", suspendWhenHidden=FALSE)\n  # find the appropriate UI\n  output$ui_finder <- renderUI({\n#    if(is.null(input$datatabs)){      \n#      get(\"ui_All\")()\n#    }else{\n#      get(paste0('ui_',input$datatabs))()\n#    }\n#     if(input$tool == \"data\") {\n#       if(!is.null(input$datatabs)) get(paste0('ui_',input$datatabs))()\n#     } else {\n#       if(!is.null(input$tool)) get(paste0('ui_',input$tool))()\n#     }\n  })  \n  outputOptions(output, \"ui_finder\", suspendWhenHidden=FALSE)\n  output$datasets <- renderUI({   \n    inFile <- input$uploadfile\n    if(!is.null(inFile)) {\n      # iterating through the files to upload\n      isolate({\n        for(i in 1:(dim(inFile)[1])) {\n          loadUserData(inFile[i,'name'], inFile[i,'datapath'])\n          # unlink(inFile[i,'datapath'], recursive = FALSE, force = TRUE)\n        }\n      })\n      val <- values$datasetlist[1]\n    }else{\n      val <- \"sigGWASsnpsCombinedIterations.longhorn.allLoc.csv\"\n    }\n        \n    # Drop-down selection of data set\n    # selectInput(inputId = \"datasets\", label = \"Datasets:\", choices = datasets, selected = datasets[1], multiple = FALSE)\n    selectInput(inputId = \"datasets\", label = \"Datasets:\", choices = values$datasetlist, selected = values$datasetlist[values$datasetlist==val], multiple = FALSE, selectize=FALSE)\n  })\n  \n  reactiveAnnotTable <- reactive({\n    if(is.null(input$datasets)) return()\n    centerBP <- as.numeric(input$selected[[1]])\n    winHigh <- centerBP+input$window[1]\n    winLow <- centerBP-input$window[1]\n    if(winLow < 0){winLow <- 0}    \n    thisChrAnnot <- subset(annotGeneLoc[input$organism][[1]],chromosome==input$chr)\n    thisAnnot <- thisChrAnnot[thisChrAnnot$transcript_start >= winLow & thisChrAnnot$transcript_end <= winHigh,]    \n    thisAnnot  \n  })\n  \n  #Returns the nicely formatted preview table\n  output$htmlDataExample <- reactive({\n    if(is.null(input$datasets)) return()\n    \n    dat <- getdata()\n\n    # necessary when deleting a dataset\n    if(is.null(dat)) return()\n    \n    # Show only the first 10 rows\n    nr <- min(10,nrow(dat))\n    dat <- data.frame(dat[1:nr,, drop = FALSE])\n    \n    #dat <- date2character_dat(dat) #may be needed to print table if there is a data column\n    \n    html <- print(xtable::xtable(dat), type='html', print.results = FALSE)\n    html <- sub(\"<TABLE border=1>\",\"<table class='table table-condensed table-hover'>\", html)\n    Encoding(html) <- 'UTF-8'\n    html\n    \n  })\n  output$nrowDataset <- reactive({\n    if(is.null(input$datasets)) return()\n    dat <- getdata()\n    if(is.null(dat)) return()\n    nr <- nrow(dat)\n    paste0('<p>First 10 rows shown of ',nr,' rows. See Data Table tab for details.</p>')\n  })\n  output$ui_data_tabs <- renderUI({   # htmlOutput(\"htmlDataExample\")})\n    tabsetPanel(id = \"datatabs\",      \n      tabPanel(title=\"Manage\",value=\"Manage\",htmlOutput(\"htmlDataExample\"),\n               htmlOutput(\"nrowDataset\"),\n               tags$div(\n                class = \"container\",\n                \n                #tags$p(tags$br()),\n                row(\n                  col(3, tags$br()),\n                  col(7, h4('Select appropriate columns to be used for plotting.'))\n                #HTML('<h4>Select appropriate columns to be used for plotting.</h4>'),\n                ),\n                tags$hr(),\n                row(\n                   #col(2, tags$br()),\n                   col(2,uiOutput(\"chrColumn\"),uiOutput(\"bpColumn\")),\n                   col(2,uiOutput(\"plotAll\"),uiOutput(\"traitColumns\")),\n                   col(2,uiOutput(\"yAxisColumn\")),\n                   col(2,uiOutput(\"axisLimBool\"),uiOutput(\"axisLim\")),\n                   col(2,actionButton(\"SubmitColsButton\",\"Submit\"))\n                ),\n                tags$hr(),\n                row(\n                  col(7, uiOutput(\"supportInterval\"))#\n                ),\n                row(\n                  col(2, uiOutput(\"SIbpStart\")),\n                  col(2, uiOutput(\"SIyAxisColumn\")),\n                  col(2, uiOutput(\"SIaxisLimBool\"),uiOutput(\"SIaxisLim\"))\n                )\n              )\n#                   col(\n#                     4,\n#                     uiOutput(\"traitColumns\"),\n#                     uiOutput(\"yAxisColumn\")\n#                   )\n#                 )                                                \n# #               #HTML(dataDescriptionOutput())\n#                )\n      ),\n      tabPanel(title=\"Data Table\",value=\"Table\",dataTableOutput(\"dataviewer\")),\n      tabPanel(title=\"Whole Genome View\",value=\"panel1\",showOutput(\"gChart\", \"highcharts\")),#showOutput(\"gChart\",\"highcharts\"))\n      tabPanel(title=\"Chromosome View\",value=\"panel2\",showOutput(\"pChart\", \"highcharts\"),showOutput(\"zChart\", \"highcharts\"),\n               tags$script('Shiny.addCustomMessageHandler(\"customMsg\", function(bandOpts){\n                                            chartXAxis = $(\"#pChart\").highcharts().xAxis[0]\n                                            chartXAxis.removePlotBand()\n                                            chartXAxis.addPlotBand(bandOpts)\n                                          })'\n               )),\n      tabPanel(title=\"Annotations Table\",value=\"Annot\",dataTableOutput(\"annotViewer\"))\n    )#end tabsetPanel\n  })#end data tabs\n  outputOptions(output, \"ui_data_tabs\", suspendWhenHidden=FALSE)\n  output$annotViewer <- renderDataTable({\n#    if(is.null(input$datasets)) return()\n#    centerBP <- as.numeric(input$selected[[1]])\n#    winHigh <- centerBP+input$window[1]\n#    winLow <- centerBP-input$window[1]\n#    if(winLow < 0){winLow <- 0}    \n#    thisChrAnnot <- subset(annotGeneLoc[input$organism][[1]],chromosome==input$chr)\n#    thisAnnot <- thisChrAnnot[thisChrAnnot$transcript_start >= winLow & thisChrAnnot$transcript_end <= winHigh,]        \n#    thisAnnot\n    reactiveAnnotTable()\n  }, options = list(bSortClasses = TRUE, bCaseInsensitive = TRUE,\n                    aLengthMenu = c(15, 50, 100, 200, 500), iDisplayLength = 15,\n                    \"sDom\" = 'T<\"clear\">lfrtip',\n                    \"oTableTools\" = list(\n                      \"sSwfPath\" = \"/tabletools/swf/copy_csv_xls_pdf.swf\",\n                      \"aButtons\" = list(\n                        \"copy\",\n                        \"print\",\n                        list(\"sExtends\" = \"collection\",\n                             \"sButtonText\" = \"Save\",\n                             \"aButtons\" = c(\"csv\",\"xls\",\"pdf\")\n                        )\n                      )\n                    )                    \n          )\n  )#end annotation table\n  output$dataviewer <-renderDataTable({    \n    if(is.null(input$datasets) || is.null(input$columns)) return()\n    \n    dat <- getdata()\n    #dat <- date2character()\n    \n    if(!all(input$columns %in% colnames(dat))) return()\n    \n    if(input$dv_select != '') {\n      selcom <- input$dv_select\n      selcom <- gsub(\" \", \"\", selcom)\n      \n      seldat <- try(do.call(subset, list(dat,parse(text = selcom))), silent = TRUE)\n      \n      if(!is(seldat, 'try-error')) {\n        if(is.data.frame(seldat)) {\n          dat <- seldat\n          seldat <- NULL\n        }\n      }\n    }\n    \n    dat <- data.frame(dat[, input$columns, drop = FALSE])\n    dat\n    \n    # html <- print(xtable::xtable(dat), type='html', print.results = FALSE)\n    # html <- sub(\"<TABLE border=1>\",\"<table class='table table-condensed table-hover'>\", html)\n    # html\n    \n  }, options = list(bSortClasses = TRUE, bCaseInsensitive = TRUE,\n                      aLengthMenu = c(15, 50, 100, 200, 500), iDisplayLength = 15,\n                      \"sDom\" = 'T<\"clear\">lfrtip',\n                      \"oTableTools\" = list(\n                          \"sSwfPath\" = \"/tabletools/swf/copy_csv_xls_pdf.swf\",\n                          \"aButtons\" = list(\n                            \"copy\",\n                            \"print\",\n                            list(\"sExtends\" = \"collection\",\n                                \"sButtonText\" = \"Save\",\n                                \"aButtons\" = c(\"csv\",\"xls\",\"pdf\")\n                              )\n                         )\n                    )                    \n                )\n  )#end dataviewer\n  \n  output$downloadAnnot <- downloadHandler(\n    filename = function() {paste0(\"AnnotationsAround.chr\",input$chr,\".\",input$selected[[1]],\"bp.\",input$organism,\".csv\")},\n    content = function(file) {write.csv(reactiveAnnotTable(),file,row.names=F)}\n  )\n  \n  output$columns <- renderUI({\n    cols <- varnames()    \n    selectInput(\"columns\", \"Select columns to show:\", choices = as.list(cols), selected = names(cols), multiple = TRUE)\n  })\n  \n  output$axisLimBool <- renderUI({\n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){\n      val = datasetProp()$axisLim[datasetProp()$dataset == input$datasets]\n    }else{\n      val = TRUE}\n    checkboxInput('axisLimBool', 'Set Y-axis Limits?', val)\n  })\n  \n  output$organism <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()\n    if(input$datasets %in% datasetProp()$dataset){\n      selected = datasetProp()$organism[datasetProp()$dataset == input$datasets]\n    }else{\n      selected = \"Corn\"\n    }\n    #Add Rice\n    #\n    selectizeInput(\"organism\", \"Dataset Organism:\", choices = c(\"Corn\",\"Soybean\",\"Arabidopsis\",\"Rice\"), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\"))\n  })\n  \n  output$chrColumn <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()    \n    if(input$datasets %in% datasetProp()$dataset){\n      selected = datasetProp()$chrColumn[datasetProp()$dataset == input$datasets]\n    }else{\n      selected = names(cols[1])\n    }    \n    selectizeInput(\"chrColumn\", \"Chromosome Column:\", choices = as.list(cols), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\"))\n  })\n\n  output$bpColumn <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()\n    if(input$datasets %in% datasetProp()$dataset){\n      selected = datasetProp()$bpColumn[datasetProp()$dataset == input$datasets]\n    }else{\n      selected = names(cols[2])\n    }\n    selectizeInput(\"bpColumn\", \"Base Pair Column:\", choices = as.list(cols), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\"))\n  })\n  \n  output$traitColumns <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()\n    if(input$datasets %in% datasetProp()$dataset){\n      selected = unlist(strsplit(datasetProp()$traitCol[datasetProp()$dataset == input$datasets],\";\"))\n    }else{\n      selected = names(cols[3:4])\n    }\n    conditionalPanel(condition = \"input.plotAll==false\",\n                     selectizeInput(\"traitColumns\", \"Group by these trait column(s):\", choices = as.list(cols), selected = selected, multiple = TRUE, options = list(dropdownParent=\"body\"))\n    )        \n  })  \n  \n  output$plotAll <- renderUI({\n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){      \n      val = datasetProp()$plotAll[datasetProp()$dataset == input$datasets]\n    }else{\n      val = FALSE\n    }    \n    checkboxInput('plotAll', 'All data is the same trait', val)    \n  })\n  \n  output$yAxisColumn <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()       \n    if(input$datasets %in% datasetProp()$dataset){      \n      selected = datasetProp()$yAxisColumn[datasetProp()$dataset == input$datasets]\n    }else{\n      #selected = names(cols[10])\n      selected = as.character(cols[10])\n    }    \n    selectizeInput(\"yAxisColumn\", \"Y-axis column:\", choices = as.list(cols), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\"))\n  })\n  outputOptions(output, \"yAxisColumn\", suspendWhenHidden=FALSE)\n  \n  output$axisLim <- renderUI({    \n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){\n      min = datasetProp()$axisMin[datasetProp()$dataset == input$datasets]\n      max = datasetProp()$axisMax[datasetProp()$dataset == input$datasets]\n    }else{\n      min = 0\n      max = 1\n    }\n    conditionalPanel(condition = \"input.axisLimBool==true\",\n                     numericInput(\"axisMin\",\"Min:\",value=min),\n                     numericInput(\"axisMax\",\"Max:\",value=max)\n    )    \n  })  \n\n  output$supportInterval <- renderUI({\n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){\n      val = datasetProp()$supportInterval[datasetProp()$dataset == input$datasets]\n    }else{\n      val = FALSE}\n    checkboxInput('supportInterval', 'Plot base pair intervals (e.g., Joint linkage support intervals)?', val)\n  })\n\n  output$SIbpStart <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()\n    if(input$datasets %in% datasetProp()$dataset){\n      selected = datasetProp()$SIbpStart[datasetProp()$dataset == input$datasets]\n      selectedEnd = datasetProp()$SIbpEnd[datasetProp()$dataset == input$datasets]\n    }else{\n      selected = names(cols[2])\n      selectedEnd = names(cols[2])\n    }\n    conditionalPanel(condition = \"input.supportInterval==true\",\n        selectizeInput(\"SIbpStart\", \"Interval Base Pair Start:\", choices = as.list(cols), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\")),\n        selectizeInput(\"SIbpEnd\", \"Interval Base Pair End:\", choices = as.list(cols), selected = selectedEnd, multiple = FALSE, options = list(dropdownParent=\"body\"))\n    )\n  })   \n\n  output$SIyAxisColumn <- renderUI({\n    if(is.null(input$datasets)){return()}\n    cols <- varnames()       \n    if(input$datasets %in% datasetProp()$dataset){  \n      selected = datasetProp()$SIyAxisColumn[datasetProp()$dataset == input$datasets]\n    }else{\n      #selected = names(cols[10])\n      selected = as.character(cols[10])\n    }        \n    conditionalPanel(condition = \"input.supportInterval==true\",                     \n                     selectizeInput(\"SIyAxisColumn\", \"Support Interval Y-axis column:\", choices = as.list(cols), selected = selected, multiple = FALSE, options = list(dropdownParent=\"body\"))\n    )\n  })\n  outputOptions(output, \"SIyAxisColumn\", suspendWhenHidden=FALSE)  \n\n  output$SIaxisLimBool <- renderUI({\n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){\n      val = datasetProp()$SIaxisLimBool[datasetProp()$dataset == input$datasets]\n    }else{\n      val = TRUE\n    }\n    conditionalPanel(condition = \"input.supportInterval==true\", \n      checkboxInput('SIaxisLimBool', 'Set Support Interval Y-axis Limits?', val)\n    )\n  })  \n\n  output$SIaxisLim <- renderUI({    \n    if(is.null(input$datasets)){return()}\n    if(input$datasets %in% datasetProp()$dataset){\n      min = datasetProp()$axisMin[datasetProp()$dataset == input$datasets]\n      max = datasetProp()$axisMax[datasetProp()$dataset == input$datasets]\n    }else{\n      min = 0\n      max = 1\n    }\n    conditionalPanel(condition = \"input.supportInterval==true && input.SIaxisLimBool==true\",\n                     numericInput(\"SIaxisMin\",\"Min:\",value=min),\n                     numericInput(\"SIaxisMax\",\"Max:\",value=max)\n    )    \n  })  \n\n  #builds list of multiple selection boxes for traits that have multiple columns in dataset\n  output$traitColBoxes <- renderUI({\n    if(input$plotAll == TRUE){return()}\n    lapply(input$traitColumns, function(i) {      \n      traits <- sort(unique(values[[input$datasets]][,i]))\n      selectizeInput(inputId=i, label=paste0(\"Select \",i),traits,\n                  selected=traits[1],\n                  multiple=TRUE, options = list(dropdownParent=\"body\"))\n    })\n  })\n\n  output$selectChr <- renderUI({\n    if(is.null(input$organism)){return()}\n    selectInput(\"chr\", \"Chromosome:\",1:length(chrSize[input$organism][[1]]),selectize = FALSE)\n  })\n  outputOptions(output, \"selectChr\", suspendWhenHidden=FALSE)\n  \n  output$selectedOut <- renderUI({\n    numericInput(\"selected\", \"\", value=100000)\n  })\n  outputOptions(output, \"selectedOut\", suspendWhenHidden=FALSE)\n  output$windowOut <- renderUI({\n    #sliderInput(inputId=\"window\",label=\"Window size around selected point:\",min=-1e6,max=1e6,value=c(-7.5e5,7.5e5))\n    sliderInput(inputId=\"window\",label=\"Window size around selected point:\",min=1000,max=.5e6,value=2.5e5)\n  })\n  outputOptions(output, \"windowOut\", suspendWhenHidden=FALSE)\n  \n  #returns datasets from uploaded file\n  getdata <- reactive({\n    values[[input$datasets]]\n  })\n  \n  #builds list of column names and type in dataset\n  varnames <- reactive({\n    # if(is.null(input$datasets)) return()\n    dat <- getdata_class()\n    vars <- names(dat)\n    names(vars) <- paste(vars, \" {\", dat, \"}\", sep = \"\")\n    vars\n  })\n  \n  getdata_class <- reactive({\n    cls <- sapply(getdata(), function(x) class(x)[1])\n    gsub(\"ordered\",\"factor\", cls)\n  })\n  \n  #Function to handle loading of data from a file or rObject\n  loadUserData <- function(filename, uFile) {  \n    ext <- file_ext(filename)\n    # objname <- robjname <- sub(paste(\".\",ext,sep = \"\"),\"\",basename(filename))\n    objname <- sub(paste(\".\",ext,sep = \"\"),\"\",basename(filename))\n    ext <- tolower(ext)\n    \n    if(ext == 'rda' || ext == 'rdata') {\n      # objname will hold the name of the object(s) inside the R datafile\n      robjname <- load(uFile)\n      \n      if(length(robjname) > 1) {\n        \n        #values[[objname]] <- data.frame(get(robjname[-which(robjname == \"description\")]))\n        values[[objname]] <- data.frame(get(robjname[1]))\n        #values[[paste0(objname,\"_descr\")]] <- get(\"description\")\n        \n      } else {\n        \n        values[[objname]] <- data.frame(get(robjname))  # only work with data.frames\n      }\n    }\n    \n    if(length(values[['datasetlist']]) == 0 || values[['datasetlist']][1] == '') {\n      values[['datasetlist']] <- c(objname)\n    } else {\n      values[['datasetlist']] <- unique(c(objname,values[['datasetlist']]))\n    }\n    \n    if(ext == 'sav') {\n      values[[objname]] <- as.data.frame(as.data.set(spss.system.file(uFile)))\n    } else if(ext == 'dta') {\n      values[[objname]] <- read.dta(uFile)\n    } else if(ext == 'csv') {\n      values[[objname]] <- read.csv(uFile, header=input$header, sep=input$sep)\n    }\n  }\n  \n  #add a totalBP column to an input dataset if not already present\n  calculateTotalBP <- reactive({ \n    if(\"totalBP\" %in% colnames(values[[input$datasets]])){\n      \n    }else{\n      #progress <- Progress$new(session, min=1, max=1)\n      #on.exit(progress$close())\n      \n      #progress$set(message = 'Preparing data for plotting.',\n                  # detail = 'This may take a few seconds...')\n#       withProgress(session, min=1, max=400, expr={\n#         for(i in 1:400) {\n#           setProgress(message = 'Preparing Data for Plotting',\n#                       detail = 'This may take a few seconds...',\n#                       value=i)\n#           #print(i)\n#           Sys.sleep(0.1)\n#         }\n#       })      \n      cumBP<-c(0,cumsum(as.numeric(chrSize[input$organism][[1]])))\n      values[[input$datasets]] <- values[[input$datasets]][order(values[[input$datasets]][,input$chrColumn],values[[input$datasets]][,input$bpColumn]),]\n      numeachchr<-aggregate(values[[input$datasets]][,input$bpColumn],list(values[[input$datasets]][,input$chrColumn]),length)\n#      adjust<-rep(cumBP[1],numeachchr$x[numeachchr$Group.1==1])            \n      adjust <- numeric()\n      for (i in 1:(length(cumBP)-1)){#max(unique(values[[input$datasets]][,input$chrColumn]))){\n        if(length(numeachchr$x[numeachchr$Group.1==i])==0){next;}\n        adjust<-c(adjust,rep(cumBP[i],numeachchr$x[numeachchr$Group.1==i]))\n      }\n      #newval <- values[[input$datasets]][600,input$bpColumn]+adjust[600]      \n      values[[input$datasets]]$totalBP <- values[[input$datasets]][,input$bpColumn]+adjust\n      \n      #values[[input$datasets]] <- adply(values[[input$datasets]],1,function(x){data.frame(totalBP=sum(x[[input$bpColumn]],chrSize$bp[chrSize$chr %in% if(x[[input$chrColumn]]==1) 0 else c(1:(x[[input$chrColumn]]-1))]))})\n    }\n   if(input$supportInterval == TRUE){\n      if(\"SIbpStartTotal\" %in% colnames(values[[input$datasets]])){\n        \n      }else{\n         \n        cumBP<-c(0,cumsum(as.numeric(chrSize[input$organism][[1]])))\n        values[[input$datasets]] <- values[[input$datasets]][order(values[[input$datasets]][,input$chrColumn],values[[input$datasets]][,input$SIbpStart]),]\n        numeachchr<-aggregate(values[[input$datasets]][,input$SIbpStart],list(values[[input$datasets]][,input$chrColumn]),length)\n        adjust <- numeric()\n        for (i in 1:(length(cumBP)-1)){#max(unique(values[[input$datasets]][,input$chrColumn]))){\n          if(length(numeachchr$x[numeachchr$Group.1==i])==0){next;}\n          adjust<-c(adjust,rep(cumBP[i],numeachchr$x[numeachchr$Group.1==i]))\n        }\n        values[[input$datasets]]$SIbpStartTotal <- values[[input$datasets]][,input$SIbpStart]+adjust    \n      }\n    \n      if(\"SIbpEndTotal\" %in% colnames(values[[input$datasets]])){\n        \n      }else{\n        \n        cumBP<-c(0,cumsum(as.numeric(chrSize[input$organism][[1]])))\n        values[[input$datasets]] <- values[[input$datasets]][order(values[[input$datasets]][,input$chrColumn],values[[input$datasets]][,input$SIbpEnd]),]\n        numeachchr<-aggregate(values[[input$datasets]][,input$SIbpEnd],list(values[[input$datasets]][,input$chrColumn]),length)\n        adjust <- numeric()\n        for (i in 1:(length(cumBP)-1)){#max(unique(values[[input$datasets]][,input$chrColumn]))){\n          if(length(numeachchr$x[numeachchr$Group.1==i])==0){next;}\n          adjust<-c(adjust,rep(cumBP[i],numeachchr$x[numeachchr$Group.1==i]))\n        }\n        values[[input$datasets]]$SIbpEndTotal <- values[[input$datasets]][,input$SIbpEnd]+adjust    \n      }\n    } #end SI total bp calculation\n  })#end calculateTotalBP\n\n  output$pChart <- renderChart({\n    \n    #subset whole chart based on selection\n    chromChart <- values[[input$datasets]]\n    chromChart <- chromChart[chromChart[,input$chrColumn]==input$chr,]\n    \n    if(input$plotAll==FALSE){\n      for(i in input$traitColumns){\n        chromChart <- chromChart[chromChart[,i] %in% input[[i]],]\n      }    \n      if(length(input$traitColumns) > 1){\n        chromChart$trait <- do.call(paste,c(chromChart[,input$traitColumns],sep=\"_\"))    \n      }else{\n        chromChart$trait <- chromChart[,input$traitColumns]\n      }\n    }else{\n      chromChart$trait <- input$datasets\n    }\n    \n    #Separate Support Interval data from GWAS data, if support, GWAS data is assumed to be anything that has an NA in the SIbpStart column\n    if(input$supportInterval == TRUE){\n      SIchart <- chromChart[!(is.na(chromChart[,input$SIbpStart])),]\n      chromChart <- chromChart[is.na(chromChart[,input$SIbpStart]),]\n    }        \n    #check if there is any data for the selected traits\n    chromChart <- chromChart[!(is.na(chromChart[,input$bpColumn])),]\n    chromChart <- chromChart[!(is.na(chromChart[,input$yAxisColumn])),]\n    if(nrow(chromChart)==0){ #nothing is in the window, but lets still make a data.frame\n      chromChart <- values[[input$datasets]][1,]\n      chromChart[,input$yAxisColumn] <- -1    \n      if(length(input$traitColumns) > 1){\n        chromChart$trait <- do.call(paste,c(chromChart[,input$traitColumns],sep=\"_\"))    \n      }else{\n        chromChart$trait <- chromChart[,input$traitColumns]\n      }             \n    }    \n    colorTable <- colorTable() \n    \n    \n    #calculate window for plotband\n    pbWin <- isolate({\n      center <- as.numeric(input$selected[[1]])\n      winHigh <- center + input$window[1]\n      winLow <- center - input$window[1]\n      list(winLow=winLow,winHigh=winHigh)\n    })    \n    \n    pkTable <- data.frame(x=chromChart[,input$bpColumn],y=chromChart[,input$yAxisColumn],trait=chromChart$trait,\n                          #                          name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Y-value: %2$s<br>Location: %3$s<br>Base Pair: %4$s<br>SNP: %5$s<br>Chromosome: %6$s</td></tr></table>\",\n                          #name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Y-value: %2$s<br>Base Pairs: %3$s<br>Chromosome: %4$s</td></tr></table>\",\n                          name=sprintf(\"Base Pair: %1$s<br/>Chromosome: %2$s<br/>\",\n#                                       chromChart$trait,\n#                                       chromChart[,input$yAxisColumn],\n                                       #                                       pk$loc,\n                                       prettyNum(chromChart[,input$bpColumn], big.mark = \",\"),\n                                       #                                       pk$SNP,\n                                       chromChart[,input$chrColumn]\n                          ),\n                          url=\"http://danforthcenter.org\",\n                          chr=chromChart[,input$chrColumn],\n                          bp=chromChart[,input$bpColumn],stringsAsFactors=FALSE)\n    pkSeries <- lapply(split(pkTable, pkTable$trait), function(x) {\n      res <- lapply(split(x, rownames(x)), as.list)\n      names(res) <- NULL\n      res <- res[order(sapply(res, function(x) x$x))]\n      return(res)\n    })\n\n    #build JL series\n    if(input$supportInterval==TRUE){\n      if(nrow(SIchart)==0){ #nothing is in the window, but lets still make a data.frame\n        SIchart <- values[[input$datasets]][1,]\n        SIchart[,input$SIyAxisColumn] <- -1    \n        if(length(input$traitColumns) > 1){\n          SIchart$trait <- do.call(paste,c(SIchart[,input$traitColumns],sep=\"_\"))    \n        }else{\n          SIchart$trait <- SIchart[,input$traitColumns]\n        }             \n      }\n      SIchart$loc_el <- SIchart$trait\n      SIchart$trait <- paste(SIchart$trait,\"Int\",sep=\"_\")\n      \n      jlTable <- adply(SIchart,1,function(x) {data.frame(x=c(x[[input$SIbpStart]],x[[input$SIbpEnd]],x[[input$SIbpEnd]]),y=c(x[[input$SIyAxisColumn]],x[[input$SIyAxisColumn]],NA),trait=x$trait,\n                                                         name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><td align='left'>Interval: %1$s-%2$s<br>Chromosome: %3$s</td></tr></table>\",\n#                                                                      x$trait,\n#                                                                      x[[input$SIyAxisColumn]],\n                                                                      prettyNum(x[[input$SIbpStart]], big.mark = \",\"),\n                                                                      prettyNum(x[[input$SIbpEnd]], big.mark = \",\"),\n                                                                      x[[input$chrColumn]]\n                                                         ),loc_el=x$loc_el,bp=x[[input$bpColumn]],chr=x[[input$chrColumn]],stringsAsFactors=FALSE\n                                                         #                                                   \n                                                         #                                                   totalBP=x$totalBP,\n                                                         #                                                   chr=x$Chromosome,stringsAsFactors=FALSE\n      )}#end jlTable and function\n      )#end adply\n      jlTable <- jlTable[,c(\"x\",\"y\",\"trait\",\"name\",\"loc_el\",\"bp\",\"chr\")]\n      jlTable <- jlTable[order(jlTable$x),]\n    }#end build jlTable if support intervals        \n    \n    a <- rCharts::Highcharts$new()\n    a$LIB$url <- 'highcharts/' #use the local copy of highcharts, not the one installed by rCharts\n    a$xAxis(title = list(text = \"Base Pairs\"),startOnTick=TRUE,min=1,max=chrSize[input$organism][[1]][as.numeric(input$chr)],endOnTick=FALSE,\n            plotBands = list(list(from=pbWin$winLow,to=pbWin$winHigh,color='rgba(68, 170, 213, 0.4)')))\n#    a$xAxis(title = list(text = \"Base Pairs\"),startOnTick=TRUE,min=1,max=30000000,endOnTick=TRUE)\n    \n    if(input$axisLimBool == TRUE){\n      a$yAxis(title=list(text=input$yAxisColumn),min=input$axisMin,max=input$axisMax,startOnTick=FALSE)\n    }else{\n      a$yAxis(title=list(text=input$yAxisColumn),startOnTick=FALSE)      \n    }    \n\n    if(input$supportInterval==TRUE){\n      if(input$SIaxisLimBool == TRUE){\n        a$yAxis(title=list(text=input$SIyAxisColumn),min=input$SIaxisMin,max=input$SIaxisMax,gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)\n      }else{\n        a$yAxis(title=list(text=input$SIyAxisColumn),gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)   \n      }\n      \n      if(SIchart[1,input$SIyAxisColumn] != -1){\n        d_ply(jlTable,.(trait),function(x){\n          a$series(\n            data = toJSONArray2(x,json=F,names=T),\n            type = \"line\",\n            name = unique(x$trait),\n            yAxis=1,           \n            color = colorTable$color[colorTable$trait == as.character(unique(x$loc_el))])})            \n      }\n    }\n\n   if(chromChart[1,input$yAxisColumn] != -1){    \n      invisible(sapply(pkSeries, function(x) {if(length(x)==0){return()};a$series(data = x, type = \"scatter\", turboThreshold=5000, name = paste0(x[[1]]$trait), color = colorTable$color[colorTable$trait == as.character(x[[1]]$trait)])}))\n    }\n    a$chart(zoomType=\"xy\", alignTicks=FALSE,events=list(click = \"#!function(event) {this.tooltip.hide();}!#\"))\n    a$title(text=paste(input$datasets,\"Results for Chromosome\",input$chr,sep=\" \"))\n    a$subtitle(text=\"Rollover for more info. Drag chart area to zoom. Click point for zoomed annotated plot.\")\n    \n    a$plotOptions(\n      scatter = list(\n        cursor = \"pointer\",\n        #           tooltip = list(\n        #             pointFormat = \"#! function() { return this.point.name; } !#\"\n        #           ),          \n        point = list(\n          events = list(\n            #click = \"#! function() { window.open(this.options.url); } !#\")), #open webpage\n            #click = \"#! function(event) {alert(this.url);} !#\")), #display popup\n            #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n            click = \"#! function(){$('input#selected').val(this.options.bp); $('input#selected').trigger('change');} !#\")),\n        marker = list(\n          symbol = \"circle\",\n          radius = 5\n#          states = list(hover = list(enabled = TRUE))\n        ),\n        tooltip = list(\n          headerFormat = \"<b>{series.name}</b><br/>{point.key}<br/>Y-value: {point.y}<br/>\",\n          pointFormat = \"\",\n          followPointer = TRUE\n        )\n #       states = list(hover = list(marker = list(enabled = FALSE)))\n#        tooltip = list(\n#          followPointer = TRUE\n#        )\n      ),\n      line = list(\n        lineWidth = 10,\n        cursor = \"pointer\",\n#        stickyTracking=FALSE,\n        point = list(\n          events = list(\n            #click = \"#! function() { window.open(this.url); } !#\")), #open webpage\n            #click = \"#! function(event) {alert(this.url);} !#\")), #display popup\n            #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n            #click = \"#! function(){$('select#chr').val(this.options.chr); $('select#chr').trigger('change'); $('input#selected').val(this.options.bp); $('input#selected').trigger('change');  $('ul#methodtabs li').eq(0).removeClass('active'); $('ul#methodtabs li').eq(1).addClass('active'); $('.tab-content div').toggleClass('active'); $('#pChart').trigger('shown')} !#\")),\n            click = \"#! function(){$('input#selected').val(this.options.bp); $('input#selected').trigger('change');} !#\")),\n        marker = list(\n          enabled = FALSE,\n          states = list(hover = list(enabled=FALSE))\n        )\n      ),\n      spline = list(\n        lineWidth = 3,\n        cursor = \"pointer\"\n      )\n    )\n    #a$tooltip(useHTML = T, formatter = \"#! function() { return this.point.name; } !#\")\n    #a$tooltip(snap = 5, useHTML = T, formatter = \"#! function() { return this.point.name; } !#\")\n    a$exporting(enabled=TRUE)\n    a$set(dom = 'pChart')\n    return(a)\n    \n  })#end pchart\n    \n  #Genome wide chart\n  output$gChart <- renderChart({\n       \n    calculateTotalBP()\n\n    #subset whole chart based on selection\n    genomeChart <- values[[input$datasets]]\n    if(input$plotAll == FALSE){\n      for(i in input$traitColumns){\n        genomeChart <- genomeChart[genomeChart[,i] %in% input[[i]],]\n      }    \n      if(length(input$traitColumns) > 1){\n        genomeChart$trait <- do.call(paste,c(genomeChart[,input$traitColumns],sep=\"_\"))    \n      }else{\n        genomeChart$trait <- genomeChart[,input$traitColumns]\n      }\n    }else{\n        genomeChart$trait <- input$datasets\n    }\n    \n    #Separate Support Interval data from GWAS data, if support, GWAS data is assumed to be anything that has an NA in the SIbpStart column\n    if(input$supportInterval == TRUE){\n      SIchart <- genomeChart[!(is.na(genomeChart[,input$SIbpStart])),]\n      genomeChart <- genomeChart[is.na(genomeChart[,input$SIbpStart]),]\n    }\n    \n    #filter genomeChart for only rows that have a base pair value\n    genomeChart <- genomeChart[!(is.na(genomeChart[,input$bpColumn])),]\n    genomeChart <- genomeChart[!(is.na(genomeChart[,input$yAxisColumn])),]\n    #check if there is any data for the selected traits\n    if(nrow(genomeChart)==0){ #nothing is in the window, but lets still make a data.frame\n       genomeChart <- values[[input$datasets]][1,]\n       genomeChart[,input$yAxisColumn] <- -1    \n       if(length(input$traitColumns) > 1){\n         genomeChart$trait <- do.call(paste,c(genomeChart[,input$traitColumns],sep=\"_\"))    \n       }else{\n         genomeChart$trait <- genomeChart[,input$traitColumns]\n       }             \n    }\n        \n    colorTable <- colorTable()\n     genomeTable <- data.frame(x=genomeChart$totalBP,y=genomeChart[,input$yAxisColumn],trait=genomeChart$trait,\n#                               name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>RMIP: %2$s<br>Location: %3$s<br>Base Pairs: %4$s<br>SNP: %5$s<br>Chromosome: %6$s</td></tr></table>\",\n#                               name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Y-value: %2$s<br>Base Pairs: %3$s<br>Chromosome: %4$s</td></tr></table>\",\n                                name=sprintf(\"Base Pair: %1$s<br/>Chromosome: %2$s<br/>\",\n#                                            genomeChart$trait,\n#                                            genomeChart[,input$yAxisColumn],\n#                                            genomeChart$loc,\n                                            prettyNum(genomeChart[,input$bpColumn], big.mark = \",\"),\n#                                            genomeChart$SNP,\n                                            genomeChart[,input$chrColumn]\n                               ),\n                               url=\"http://danforthcenter.org\",\n                               chr=genomeChart[,input$chrColumn],\n                               bp=genomeChart[,input$bpColumn],stringsAsFactors=FALSE)\n     genomeSeries <- lapply(split(genomeTable, genomeTable$trait), function(x) {\n       res <- lapply(split(x, rownames(x)), as.list)\n       names(res) <- NULL\n       res <- res[order(sapply(res, function(x) x$x))]\n       return(res)\n     })\n#     \n      #build JL series\n    if(input$supportInterval==TRUE){\n      if(nrow(SIchart)==0){ #nothing is in the window, but lets still make a data.frame\n        SIchart <- values[[input$datasets]][1,]\n        SIchart[,input$SIyAxisColumn] <- -1    \n        if(length(input$traitColumns) > 1){\n          SIchart$trait <- do.call(paste,c(SIchart[,input$traitColumns],sep=\"_\"))    \n        }else{\n          SIchart$trait <- SIchart[,input$traitColumns]\n        }             \n      }\n      SIchart$loc_el <- SIchart$trait\n      SIchart$trait <- paste(SIchart$trait,\"Int\",sep=\"_\")\n  \n       jlTable <- adply(SIchart,1,function(x) {data.frame(x=c(x$SIbpStartTotal,x$SIbpEndTotal,x$SIbpEndTotal),y=c(x[[input$SIyAxisColumn]],x[[input$SIyAxisColumn]],NA),trait=x$trait,\n                                                    #name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Y-value: %2$.2f <br>Interval: %3$s-%4$s<br>Chromosome: %5$s</td></tr></table>\",\n                                                    name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><td align='left'>Interval: %1$s-%2$s<br>Chromosome: %3$s</td></tr></table>\",\n#                                                                 x$trait,\n#                                                                 x[[input$SIyAxisColumn]],\n                                                                 prettyNum(x[[input$SIbpStart]], big.mark = \",\"),\n                                                                 prettyNum(x[[input$SIbpEnd]], big.mark = \",\"),\n                                                                 x[[input$chrColumn]]\n                                                    ),loc_el=x$loc_el,bp=x[[input$bpColumn]],chr=x[[input$chrColumn]],stringsAsFactors=FALSE\n  #                                                   \n  #                                                   totalBP=x$totalBP,\n  #                                                   chr=x$Chromosome,stringsAsFactors=FALSE\n         )}#end jlTable and function\n       )#end adply\n       jlTable <- jlTable[,c(\"x\",\"y\",\"trait\",\"name\",\"loc_el\",\"bp\",\"chr\")]\n       jlTable <- jlTable[order(jlTable$x),]\n    }#end build jlTable if support intervals\n\n    #build list for where to put plotbands for this organism\n    bigList <- list()\n    cumBP<-c(0,cumsum(as.numeric(chrSize[input$organism][[1]])))\n    for(i in 1:(length(cumBP)-1)){\n      if(i %% 2 == 0 ){ #even\n        bigList[[length(bigList)+1]] <- list(from=cumBP[i]+1,to=cumBP[i+1],label=list(text=i,style=list(color=\"#6D869F\"),verticalAlign=\"bottom\"))\n      }else{ #odd\n        bigList[[length(bigList)+1]] <- list(from=cumBP[i]+1,to=cumBP[i+1],color='rgba(68, 170, 213, 0.1)',label=list(text=i,style=list(color=\"#6D869F\"),verticalAlign=\"bottom\"))\n      }\n    }    \n    \n     c <- rCharts::Highcharts$new()\n    c$LIB$url <- 'highcharts/'\n    c$xAxis(title = list(text = \"Chromosome\",margin=15),startOnTick=TRUE,min=0,max=sum(as.numeric(chrSize[input$organism][[1]])),endOnTick=FALSE,labels=list(enabled=FALSE),tickWidth=0,\n            plotBands = bigList)   \n    \n     if(input$axisLimBool == TRUE){       \n       c$yAxis(title=list(text=input$yAxisColumn),min=input$axisMin,max=input$axisMax,startOnTick=FALSE)\n     }else{\n       c$yAxis(title=list(text=input$yAxisColumn),startOnTick=FALSE)      \n     }\n     \n     if(input$supportInterval==TRUE){\n       if(input$SIaxisLimBool == TRUE){\n         c$yAxis(title=list(text=input$SIyAxisColumn),min=input$SIaxisMin,max=input$SIaxisMax,gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)   \n       }else{\n         c$yAxis(title=list(text=input$SIyAxisColumn),gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)\n       }\n       \n       if(SIchart[1,input$SIyAxisColumn] != -1){\n         d_ply(jlTable,.(trait),function(x){\n           c$series(\n             data = toJSONArray2(x,json=F,names=T),\n             type = \"line\",\n             name = unique(x$trait),\n             yAxis=1,           \n             color = colorTable$color[colorTable$trait == as.character(unique(x$loc_el))])})            \n       }\n     }\n     if(genomeChart[1,input$yAxisColumn] != -1){\n       invisible(sapply(genomeSeries, function(x) {if(length(x)==0){return()};c$series(data = x, turboThreshold=5000,type = \"scatter\", color = colorTable$color[colorTable$trait == as.character(x[[1]]$trait)], name = paste0(x[[1]]$trait))}))\n     }\n     \n     c$chart(zoomType=\"xy\",alignTicks=FALSE,events=list(click = \"#!function(event) {this.tooltip.hide();}!#\"))\n     c$title(text=paste(input$datasets,\" Results\",sep=\" \"))\n     c$subtitle(text=\"Rollover for more info. Drag chart area to zoom. Click point to switch to chromosome and annotation view.\")\n     \n     c$plotOptions(\n        scatter = list(\n          cursor = \"pointer\",\n          point = list(\n            events = list(\n              #click = \"#! function() { window.open(this.options.url); } !#\")), #open webpage\n              #click = \"#! function(event) {alert(this.name);} !#\")), #display popup\n              #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n              #click = \"#! function(){$('input#selected').val(134); $('input#selected').trigger('change');} !#\")),\n              click = \"#! function(){$('select#chr').val(this.options.chr); $('select#chr').trigger('change'); $('input#selected').val(this.options.bp); \n                                     $('input#selected').trigger('change'); $('ul#datatabs li').eq(0).removeClass('active'); \n                                     $('ul#datatabs li').eq(1).removeClass('active'); $('ul#datatabs li').eq(2).removeClass('active');\n                                     $('ul#datatabs li').eq(4).removeClass('active');\n                                     $('ul#datatabs li').eq(3).addClass('active'); \n                                     $('#pChart').trigger('change');$('#pChart').trigger('shown');\n                                     $('.tab-content div').toggleClass(function(){if(this.getAttribute('data-value')=='panel2' || this.getAttribute('data-value')=='panel1'){return 'active';}else{return '';}});\n                                     $('.tab-content div').trigger('change');$('ul#datatabs li').trigger('change');} !#\")), \n          marker = list(\n            symbol = \"circle\",\n            radius = 5\n          ),\n          tooltip = list(\n            headerFormat = \"<b>{series.name}</b><br/>{point.key}<br/>Y-value: {point.y}<br/>\",\n            pointFormat = \"\",\n            followPointer = TRUE\n          )\n        ),\n        line = list(\n          lineWidth = 10,\n          cursor = \"pointer\",\n          point = list(\n            events = list(\n             #click = \"#! function() { window.open(this.url); } !#\")), #open webpage\n             #click = \"#! function(event) {alert(this.url);} !#\")), #display popup\n             #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n             #click = \"#! function(){$('input#selected').val(134); $('input#selected').trigger('change');} !#\")),\n             #click = \"#! function(){$('input#selected').val(this.options.bp); $('input#selected').trigger('change');} !#\")),\n             #click = \"#! function(){$('select#chr').val(this.options.chr); $('select#chr').trigger('change'); $('input#selected').val(this.options.bp); $('input#selected').trigger('change');  $('ul#datatabs li').eq(2).removeClass('active'); $('ul#datatabs li').eq(3).addClass('active'); $('.tab-content div').toggleClass('active'); $('#pChart').trigger('shown')} !#\")),\n             click = \"#! function(){$('select#chr').val(this.options.chr); $('select#chr').trigger('change'); $('input#selected').val(this.options.bp); \n                                    $('input#selected').trigger('change'); $('ul#datatabs li').eq(0).removeClass('active'); \n                                    $('ul#datatabs li').eq(1).removeClass('active'); $('ul#datatabs li').eq(2).removeClass('active');\n                                    $('ul#datatabs li').eq(4).removeClass('active');\n                                    $('ul#datatabs li').eq(3).addClass('active'); \n                                    $('#pChart').trigger('change');$('#pChart').trigger('shown');\n                                    $('.tab-content div').toggleClass(function(){if(this.getAttribute('data-value')=='panel2' || this.getAttribute('data-value')=='panel1'){return 'active';}else{return '';}});\n                                    $('.tab-content div').trigger('change');$('ul#datatabs li').trigger('change');} !#\")),             \n          marker = list(\n            enabled = FALSE,\n            states = list(hover = list(enabled=FALSE))\n          )\n        )            \n      )#end plotOptions        \n     #c$tooltip(useHTML = T, formatter = \"#! function() { return this.point.name; } !#\")\n     #c$tooltip(formatter = \"#! function() { return this.point.name; } !#\")\n     c$exporting(enabled=TRUE)\n     #c$legend(enabled=FALSE)\n     c$credits(enabled=TRUE)\n     c$set(dom = 'gChart')     \n     return(c)\n#    h1 <- hPlot(x = \"Wr.Hnd\", y = \"NW.Hnd\", data = MASS::survey, type = c(\"line\", \n#                                                                          \"bubble\", \"scatter\"), group = \"Clap\", size = \"Age\")\n#    h1$set(dom = 'gChart')\n#    return(h1)    \n   })#end gchart\n\n\n  output$zChart <- renderChart({\n    if(is.null(input$selected)) return()\n\n    centerBP <- as.numeric(input$selected[[1]])\n    winHigh <- centerBP+input$window[1]\n    winLow <- centerBP-input$window[1]\n    if(winLow < 0){winLow <- 0}\n    \n    zoomChart <- values[[input$datasets]]\n    zoomChart <- zoomChart[zoomChart[,input$chrColumn]==input$chr,]    \n    \n    if(input$plotAll == FALSE){\n      for(i in input$traitColumns){\n        zoomChart <- zoomChart[zoomChart[,i] %in% input[[i]],]\n      }\n      \n      if(length(input$traitColumns) > 1){\n        zoomChart$trait <- do.call(paste,c(zoomChart[,input$traitColumns],sep=\"_\"))    \n      }else{\n        zoomChart$trait <- zoomChart[,input$traitColumns]\n      }\n    }else{\n      zoomChart$trait <- input$datasets\n    }\n    \n    #Separate Support Interval data from GWAS data, if support, GWAS data is assumed to be anything that has an NA in the SIbpStart column\n    if(input$supportInterval == TRUE){\n      SIchart <- zoomChart[!(is.na(zoomChart[,input$SIbpStart])),]\n      zoomChart <- zoomChart[is.na(zoomChart[,input$SIbpStart]),]\n      #not sure the below logic works for subsetting SIchart, probably not necessary anyways, since there are usually very few SI rows for one chromosome anyways (e.g. small overhead)\n      #SIchart <- SIchart[((SIchart[,input$SIbpStart] <= winHigh & SIchart[,input$SIbpStart] >= winLow) | (SIchart[,input$SIbpEnd] <= winHigh & SIchart[,input$SIbpEnd] >= winLow)),]\n    }    \n    \n    zoomChart <- zoomChart[(zoomChart[,input$bpColumn] <= winHigh) & (zoomChart[,input$bpColumn] >= winLow),]    \n    \n    #filter for only rows that have a base pair value\n    zoomChart <- zoomChart[!(is.na(zoomChart[,input$bpColumn])),]\n    zoomChart <- zoomChart[!(is.na(zoomChart[,input$yAxisColumn])),]    \n    if(nrow(zoomChart)==0){ #nothing is in the window, but lets still make a data.frame\n      zoomChart <- values[[input$datasets]][1,]\n      zoomChart[,input$yAxisColumn] <- -1    \n      if(length(input$traitColumns) > 1){\n        zoomChart$trait <- do.call(paste,c(zoomChart[,input$traitColumns],sep=\"_\"))    \n      }else{\n        zoomChart$trait <- zoomChart[,input$traitColumns]\n      }                   \n    }\n    colorTable <- colorTable() \n    \n    zoomTable <- data.frame(x=zoomChart[,input$bpColumn],y=zoomChart[,input$yAxisColumn],trait=zoomChart$trait,\n#                                         name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>RMIP: %2$s<br>Location: %3$s<br>Base Pairs: %4$s<br>SNP: %5$s<br>Chromosome: %6$s</td></tr></table>\",\n                                         name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Y-axis value: %2$s<br>Base Pairs: %3$s<br>Chromosome: %4$s</td></tr></table>\",                                         \n                                         zoomChart$trait,\n                                         zoomChart[,input$yAxisColumn],\n                                         #zoomChart$loc,\n                                         prettyNum(zoomChart[,input$bpColumn], big.mark = \",\"),\n                                         #zoomChart$SNP,\n                                         zoomChart[,input$chrColumn]\n                            ),\n                            url=\"http://danforthcenter.org\",\n                            chr=zoomChart[,input$chrColumn],\n                            bp=zoomChart[,input$bpColumn])\n    zoomSeries <- lapply(split(zoomTable, zoomTable$trait), function(x) {\n      res <- lapply(split(x, rownames(x)), as.list)\n      names(res) <- NULL\n      res <- res[order(sapply(res, function(x) x$x))]\n      return(res)\n    })\n    \n#     #build the sliding window GWAS summary line\n#     if(input$SlidingWinCheckbox==TRUE){\n#       winTable <- fullWinTable[fullWinTable$chr==input$chr & fullWinTable$el %in% els & fullWinTable$loc %in% input$locs]\n#     }else{\n#       winTable <- data.frame()\n#     }      \n#     \n#     if(nrow(winTable)==0){ #make a dummy point if there are none in this plot\n#       winTable <- fullWinTable[1,]\n#       winTable$chr <- input$chr\n#       winTable$env <- input$locs[1]\n#       winTable$el <- els[1]\n#       winTable$sumRMIP <- -5\n#     }\n#     \n#     winTable$loc_el <- paste(winTable$loc,winTable$el,\"Window\",sep=\"_\")\n#     winTableSeries <- adply(winTable,1,function(x) {data.table(x=x$bp,y=x$sumRMIP,element=x$loc_el,\n#                                                                name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>sumRMIP: %2$s<br>Num Points: %3$s<br>Loc: %4$s<br>Base Pair: %5$s<br>cM: %6$s<br>Chromosome: %7$s</td></tr></table>\",\n#                                                                             x$el,\n#                                                                             x$sumRMIP,\n#                                                                             x$numPoints,\n#                                                                             x$loc,\n#                                                                             prettyNum(x$bp, big.mark = \",\"),\n#                                                                             round(x$cM,digits=3),\n#                                                                             x$chr\n#                                                                ),\n#                                                                bp=x$bp,\n#                                                                chr=x$chr                                                    \n#     )})\n#     #this removes columns not needed (using data.table which is why its complicated)\n#     winTableSeries[,colnames(winTableSeries)[which(!colnames(winTableSeries) %in% c(\"x\",\"y\",\"name\",\"element\",\"bp\",\"chr\"))] := NULL,with=FALSE]\n#     #winTableSeries <- winTableSeries[order(winTableSeries$bp,winTableSeries$x),] #should be ordered from the file\n#     #build JL series\n     if(input$supportInterval==TRUE){\n       if(nrow(SIchart) == 0){ #make a dummy table, but we won't plot the series anyways\n         SIchart <- values[[input$datasets]][1,]\n         SIchart[,input$SIyAxisColumn] <- -1    \n         if(length(input$traitColumns) > 1){\n           SIchart$trait <- do.call(paste,c(SIchart[,input$traitColumns],sep=\"_\"))    \n         }else{\n           SIchart$trait <- SIchart[,input$traitColumns]\n         }                      \n       }     \n       SIchart$loc_el <- SIchart$trait\n       SIchart$trait <- paste(SIchart$trait,\"Int\",sep=\"_\")\n       jlTable <- adply(SIchart,1,function(x) {data.frame(x=c(x[[input$SIbpStart]],x[[input$SIbpEnd]],x[[input$SIbpEnd]]),y=c(x[[input$SIyAxisColumn]],x[[input$SIyAxisColumn]],NA),trait=x$trait,\n                                                          name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><td align='left'>Interval: %1$s-%2$s<br>Chromosome: %3$s</td></tr></table>\",\n                                                                       #                                                                      x$trait,\n                                                                       #                                                                      x[[input$SIyAxisColumn]],\n                                                                       prettyNum(x[[input$SIbpStart]], big.mark = \",\"),\n                                                                       prettyNum(x[[input$SIbpEnd]], big.mark = \",\"),\n                                                                       x[[input$chrColumn]]\n                                                          ),loc_el=x$loc_el,bp=x[[input$bpColumn]],chr=x[[input$chrColumn]],stringsAsFactors=FALSE\n                                                          #                                                   \n                                                          #                                                   totalBP=x$totalBP,\n                                                          #                                                   chr=x$Chromosome,stringsAsFactors=FALSE\n       )}#end jlTable and function\n       )#end adply\n       jlTable <- jlTable[,c(\"x\",\"y\",\"trait\",\"name\",\"loc_el\",\"bp\",\"chr\")]\n       jlTable <- jlTable[order(jlTable$x),]\n     }#end if support interval\n#     \n#     \n#     jl$loc_el <- paste(jl$env,jl$el,\"JL\",sep=\"_\")      \n#     jlTable <- adply(jl,1,function(x) {data.frame(x=c(x$lowerCIbp,x$upperCIbp,x$upperCIbp),y=c(x$F,x$F,NA),element=x$loc_el,url=\"http://danforthcenter.org\",\n#                                                   name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>F: %2$.2f  -logP: %3$.2f<br>Location: %4$s<br>Base Pair: %5$s<br>SI: %6$s-%7$s<br>SNP: %8$s<br>Chromosome: %9$s</td></tr></table>\",       \n#                                                                x$el,\n#                                                                x$F,\n#                                                                x$negLogP,\n#                                                                x$env,\n#                                                                prettyNum(x$bp, big.mark = \",\"),\n#                                                                prettyNum(x$lowerCIbp, big.mark = \",\"),\n#                                                                prettyNum(x$upperCIbp, big.mark = \",\"),\n#                                                                x$Name,\n#                                                                x$Chromosome\n#                                                   ),\n#                                                   bp=x$bp,\n#                                                   chr=x$Chromosome,stringsAsFactors=FALSE\n#     )}\n#     )\n#     jlTable <- jlTable[,c(\"x\",\"y\",\"name\",\"element\",\"bp\",\"chr\",\"url\")]\n#     \n#     jlTable <- jlTable[order(jlTable$bp,jlTable$x),]\n#     #     jlSeries <- lapply(split(jlTable, jlTable$element), function(x) {\n#     #       res <- lapply(split(x, rownames(x)), as.list)\n#     #       names(res) <- NULL\n#     #       #res <- res[order(sapply(res, function(x) x$x))] #\n#     #       return(res)\n#     #     })\n    \n    #build annotation series\n    #thisChrAnnot <- subset(annotGeneLoc,chromosome==input$chr)\n    thisChrAnnot <- subset(annotGeneLoc[input$organism][[1]],chromosome==input$chr)\n    thisAnnot <- thisChrAnnot[thisChrAnnot$transcript_start >= winLow & thisChrAnnot$transcript_end <= winHigh,]\n    if(nrow(thisAnnot)==0){ #nothing is in the window, but lets still make a data.frame\n      thisAnnot <- thisChrAnnot[1,]\n    }        \n    #    urlBase <- 'http://www.maizesequence.org/Zea_mays/Transcript/ProteinSummary?db=core;t='\n    urlBase <- 'http://maizegdb.org/cgi-bin/displaygenemodelrecord.cgi?id='\n    soyurlBase <- 'http://www.soybase.org/sbt/search/search_results.php?category=FeatureName&search_term='\n    araburlBase <- 'http://arabidopsis.org/servlets/TairObject?type=locus&name='\n    annotYvalReverse <- 0.01    \n    #if(input$axisLimBool == TRUE){annotYvalReverse <- input$axisMin+0.01}\n    annotYvalForward <- annotYvalReverse + 0.04\n    if(input$organism == \"Corn\"){\n      annotTable <- adply(thisAnnot[thisAnnot$transcript_strand==1,],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalForward,annotYvalForward,NA),url=paste0(urlBase,x$transcript_id),\n                                                              name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>%6$s</td></tr></table>\",\n                                                                           x$translation_id,\n                                                                           prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                           prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                           x$chromosome,\n                                                                           x$transcript_strand,\n                                                                           x$V2\n                                                              ),\n                                                              marker=c(NA,\"Arrow\",NA),\n                                                              stringsAsFactors=FALSE)})\n      \n      annotTableReverse <- adply(thisAnnot[thisAnnot$transcript_strand==-1,],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalReverse,annotYvalReverse,NA),url=paste0(urlBase,x$transcript_id),\n                                                              name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>%6$s</td></tr></table>\",\n                                                                           x$translation_id,\n                                                                           prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                           prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                           x$chromosome,\n                                                                           x$transcript_strand,\n                                                                           x$V2\n                                                              ),\n                                                              marker=c(\"Arrow\",NA,NA),\n                                                              stringsAsFactors=FALSE)})\n            \n    }else if(input$organism == \"Soybean\"){#strand is '+' or '-'\n      annotTable <- adply(thisAnnot[thisAnnot$strand==\"+\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalForward,annotYvalForward,NA),url=paste0(soyurlBase,x$transcript_id),\n                                                              name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s, Protein Length: %4$s<br>Chromosome: %5$s, Strand: %6$s<br>Top TAIR Hit Desc.: %7$s<br>Top Uniref Hit Desc.: %8$s</td></tr></table>\",\n                                                                           x$transcript_id,\n                                                                           prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                           prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                           x$Protein.Length,\n                                                                           x$chromosome,                                                                           \n                                                                           x$strand,\n                                                                           x$TopTAIRHitDescription,\n                                                                           x$TopUniref100DescriptionExtraSmall\n                                                              ),\n                                                              stringsAsFactors=FALSE)})\n      \n      annotTableReverse <- adply(thisAnnot[thisAnnot$strand==\"-\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalReverse,annotYvalReverse,NA),url=paste0(soyurlBase,x$transcript_id),\n                                                                                     name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s, Protein Length: %4$s<br>Chromosome: %5$s, Strand: %6$s<br>Top TAIR Hit Desc.: %7$s<br>Top Uniref Hit Desc.: %8$s</td></tr></table>\",\n                                                                                                  x$transcript_id,\n                                                                                                  prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                                                  prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                                                  x$Protein.Length,\n                                                                                                  x$chromosome,                                                                           \n                                                                                                  x$strand,\n                                                                                                  x$TopTAIRHitDescription,\n                                                                                                  x$TopUniref100DescriptionExtraSmall\n                                                                                     ),\n                                                                                     stringsAsFactors=FALSE)})\n    }else if(input$organism == \"Arabidopsis\"){#strand is '+' or '-'\n      annotTable <- adply(thisAnnot[thisAnnot$strand==\"+\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalForward,annotYvalForward,NA),url=paste0(araburlBase,x$Locus),\n                                                              name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>Short Desc.: %6$s</td></tr></table>\",\n                                                                           x$name,\n                                                                           prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                           prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                           x$chromosome,                                                                           \n                                                                           x$strand,\n                                                                           x$short_description\n                                                                          # x$Curator_summary\n                                                              ),\n                                                              stringsAsFactors=FALSE)}) \n      #Add Rice(or generic organism) part here, not right here but around here. Maybe make it display info in info is present, else leave empty\n      #This might allow one function for all organisms?\n      \n      annotTableReverse <- adply(thisAnnot[thisAnnot$strand==\"-\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalReverse,annotYvalReverse,NA),url=paste0(araburlBase,x$Locus),\n                                                                                     name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>Short Desc.: %6$s</td></tr></table>\",\n                                                                                                  x$name,\n                                                                                                  prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                                                  prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                                                  x$chromosome,                                                                           \n                                                                                                  x$strand,\n                                                                                                  x$short_description\n                                                                                                  # x$Curator_summary\n                                                                                     ),\n                                                                                     stringsAsFactors=FALSE)})\n    }\n\nelse{#strand is '+' or '-'\n  annotTable <- adply(thisAnnot[thisAnnot$strand==\"+\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalForward,annotYvalForward,NA),url=paste0(araburlBase,x$Locus),\n                                                                                  name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>Short Desc.: %6$s</td></tr></table>\",\n                                                                                               x$name,\n                                                                                               prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                                               prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                                               x$chromosome,                                                                           \n                                                                                               x$strand,\n                                                                                               x$short_description\n                                                                                               # x$Curator_summary\n                                                                                  ),\n                                                                                  stringsAsFactors=FALSE)}) \n  \n  annotTableReverse <- adply(thisAnnot[thisAnnot$strand==\"-\",],1,function(x) {data.frame(x=c(x$transcript_start,x$transcript_end,x$transcript_end),y=c(annotYvalReverse,annotYvalReverse,NA),url=paste0(araburlBase,x$Locus),\n                                                                                         name=sprintf(\"<table cellpadding='4' style='line-height:1.5'><tr><th>%1$s</th></tr><tr><td align='left'>Location: %2$s-%3$s<br>Chromosome: %4$s, Strand: %5$s<br>Short Desc.: %6$s</td></tr></table>\",\n                                                                                                      x$name,\n                                                                                                      prettyNum(x$transcript_start, big.mark = \",\"),\n                                                                                                      prettyNum(x$transcript_end, big.mark = \",\"),\n                                                                                                      x$chromosome,                                                                           \n                                                                                                      x$strand,\n                                                                                                      x$short_description\n                                                                                                      # x$Curator_summary\n                                                                                         ),\n                                                                                         stringsAsFactors=FALSE)})\n}\n\n\n######################\n\n\n    #annotTable <- annotTable[,c(\"x\",\"y\",\"name\",\"url\",\"marker\")]\n    annotTable <- annotTable[,c(\"x\",\"y\",\"name\",\"url\")]\n    annotTable <- annotTable[order(annotTable$x),]\n\n    #annotTableReverse <- annotTableReverse[,c(\"x\",\"y\",\"name\",\"url\",\"marker\")]\n    annotTableReverse <- annotTableReverse[,c(\"x\",\"y\",\"name\",\"url\")]\n    annotTableReverse <- annotTableReverse[order(annotTableReverse$x),]\n    \n    annotArray <- toJSONArray2(annotTable, json = F, names = T)\n#     for(i in 1:length(annotArray)){ #use this to add a symbol before or after the gene track\n#       if(is.na(annotArray[[i]]$marker)){\n#         annotArray[[i]]$marker <- NULL\n#       }else{\n#         annotArray[[i]]$marker <- NULL\n#         annotArray[[i]]$marker$symbol <- \"url(./forwardArrow.svg)\"\n#       }\n#     }\n    \n    annotArrayReverse <- toJSONArray2(annotTableReverse, json = F, names = T)\n#     for(i in 1:length(annotArrayReverse)){\n#       if(is.na(annotArrayReverse[[i]]$marker)){\n#         annotArrayReverse[[i]]$marker <- NULL\n#       }else{\n#         annotArrayReverse[[i]]$marker <- NULL\n#         annotArrayReverse[[i]]$marker$symbol <- \"url(./reverseArrow.svg)\"\n#       }\n#     }\n\n\n    b <- rCharts::Highcharts$new()\n    b$LIB$url <- 'highcharts/'\n    #b$xAxis(title=list(text=zoomTitle), min= -0, max=1,startOnTick = FALSE,reversed=FALSE)\n    #b$yAxis(title = list(text = \"Base Pairs\"),min=winLow,max=winHigh,startOnTick=TRUE,endOnTick=TRUE)\n    #b$xAxis(list(title=list(text=\"RMIP\"),min=-0,max=1,startOnTick=FALSE,reversed=FALSE),list(title=list(text=\"F-score\"),min=0,max=1,startOnTick=FALSE,opposite=TRUE,reversed=FALSE))      \n    b$chart(zoomType=\"xy\",alignTicks=FALSE,events=list(click = \"#!function(event) {this.tooltip.hide();}!#\"))\n    b$xAxis(title = list(text = \"Base Pairs\"),startOnTick=FALSE,min=winLow,max=winHigh,endOnTick=FALSE)      \n#     if(winTable$sumRMIP[1] != -5){\n#       b$yAxis(list(title=list(text=\"RMIP\"),min=-0,max=1,startOnTick=FALSE),list(title=list(text=\"F-score\"),min=0,startOnTick=FALSE,opposite=TRUE,gridLineWidth=0),\n#               list(title=list(text=\"sumRMIP\"),min=-0,startOnTick=FALSE,opposite=TRUE,gridLineWidth=0))          \n#     }else{\n#      b$yAxis(list(title=list(text=\"RMIP\"),min=-0,max=1,startOnTick=FALSE),list(title=list(text=\"F-score\"),min=0,startOnTick=FALSE,opposite=TRUE,gridLineWidth=0))\n#    }\n    if(input$axisLimBool == TRUE){\n      b$yAxis(title=list(text=input$yAxisColumn),min=input$axisMin,max=input$axisMax,startOnTick=FALSE)\n      #create a hidden axis to put the gene track on, all the options are setting to hide everything from the axis \n      b$yAxis(labels=list(enabled=FALSE),title=list(text=NULL),min=0,max=1,lineWidth=0,gridLineWidth=0,minorGridLineWidth=0,lineColor=\"transparent\",minorTickLength=0,tickLength=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)\n    }else{      \n      b$yAxis(title=list(text=input$yAxisColumn),startOnTick=FALSE) \n      #create a hidden axis to put the gene track on, all the options are setting to hide everything from the axis\n      b$yAxis(labels=list(enabled=FALSE),title=list(text=NULL),min=0,max=1,lineWidth=0,gridLineWidth=0,minorGridLineWidth=0,lineColor=\"transparent\",minorTickLength=0,tickLength=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)\n    }\n\n    if(input$supportInterval==TRUE){\n      if(input$SIaxisLimBool == TRUE){\n        b$yAxis(title=list(text=input$SIyAxisColumn),min=input$SIaxisMin,max=input$SIaxisMax,gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)\n      }else{\n        b$yAxis(title=list(text=input$SIyAxisColumn),gridLineWidth=0,minorGridLineWidth=0,startOnTick=FALSE,opposite=TRUE,replace=FALSE)   \n      }\n      \n      if(SIchart[1,input$SIyAxisColumn] != -1){\n        d_ply(jlTable,.(trait),function(x){\n          b$series(\n            data = toJSONArray2(x,json=F,names=T),\n            type = \"line\",\n            name = unique(x$trait),\n            yAxis=2,           \n            color = colorTable$color[colorTable$trait == as.character(unique(x$loc_el))])})            \n      }\n    }\n\n    #b$series(\n    #  data = toJSONArray2(annotTable, json = F, names = F),\n    #  type = \"columnrange\",\n    #  pointWidth=15,\n    #  pointPadding=0,\n    #  pointPlacement=0,\n    #  name=\"Genes\"    \n    #)    \n    \n    #invisible(sapply(jlSeries, function(x) {b$series(data = x, type = \"line\", yAxis=1,name = x[[1]]$element)}))\n#     if(jl$F[1] != -5){\n#       d_ply(jlTable,.(element),function(x){\n#         b$series(\n#           data = toJSONArray2(x,json=F,names=T),\n#           type = \"line\",\n#           name = unique(x$element),\n#           yAxis=1,\n#           visible = if(input$JLCheckbox==FALSE) FALSE else TRUE,\n#           color = colorTable$color[colorTable$loc_el == as.character(unique(x$element))])})\n#     }\n#     \n#     if(winTable$sumRMIP[1] != -5){      \n#       d_ply(winTableSeries,.(element),function(x){\n#         b$series(\n#           data = toJSONArray2(x,json=F,names=T),\n#           type = \"line\",\n#           name = unique(x$element),\n#           yAxis = 2,\n#           marker = list(enabled = FALSE),\n#           lineWidth = 3,\n#           turboThreshold=5500,\n#           color = colorTable$color[colorTable$loc_el == as.character(sub(\"_Window\",\"\",unique(x$element)))]\n#         )\n#       })\n#     }\n#     \n    if(zoomChart[1,input$yAxisColumn] != -1){\n      invisible(sapply(zoomSeries, function(x) {if(length(x)==0){return()};b$series(data = x, type = \"scatter\", color = colorTable$color[colorTable$trait == as.character(x[[1]]$trait)], name = paste0(x[[1]]$trait))}))\n    }\n    \n    b$series(\n      data = annotArray,\n      type = \"line\",\n      name = \"Forward Genes\",\n      color = \"#53377A\",\n      yAxis = 1\n    )    \n\n    b$series(\n      data = annotArrayReverse,\n      type = \"line\",\n      name = \"Reverse Genes\",\n      color = \"#53377A\",\n      yAxis = 1\n    )      \n\n    #b$series(data = annotSeries[[1]], type = \"columnrange\", pointWidth=15,pointPadding=0,pointPlacement=0,name = \"Genes\")    \n    b$chart(zoomType=\"xy\",alignTicks=FALSE,events=list(click = \"#!function(event) {this.tooltip.hide();}!#\"))\n    #b$title(text=paste(\"NAM GWAS Results\",sep=\" \"))\n    #b$subtitle(text=\"Rollover for more info. Drag chart area to zoom. Click point for zoomed annotated plot.\")    \n    b$plotOptions(\n      scatter = list(\n        cursor = \"pointer\",\n        point = list(\n          events = list(\n            #click = \"#! function() { window.open(this.options.url); } !#\")), #open webpage\n            click = \"#! function(event) {alert(this.trait);} !#\")), #display popup\n        #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n        #click = \"#! function(){$('input#selected').val(134); $('input#selected').trigger('change');} !#\")),\n        #click = \"#! function(){$('input#selected').val(this.options.bp); $('input#selected').trigger('change');} !#\")),\n        marker = list(\n          symbol = \"circle\",\n          radius = 5\n        )\n      ),\n       line = list(\n         lineWidth = 6,\n         cursor = \"pointer\",\n        #stickyTracking=FALSE,\n        point = list(\n          events = list(\n            click = \"#! function() { window.open(this.url); } !#\")), #open webpage\n        #click = \"#! function(event) {alert(this.url);} !#\")), #display popup\n        #click = \"#! function(event) {console.log(this);} !#\")), #write object to log\n        #click = \"#! function(){$('input#selected').val(134); $('input#selected').trigger('change');} !#\")),\n        #click = \"#! function(){$('input#selected').val(this.options.bp); $('input#selected').trigger('change');} !#\")),\n        marker = list(\n          enabled = FALSE,\n          radius = 1,\n          #symbol = \"url(./sun.png)\",\n          states = list(hover = list(enabled=FALSE))\n        )\n     )            \n    )        \n    #it seems almost impossible to get the tooltip to hover along the chart with this version of highcharts (4.0.1), perhaps a question to stackoverflow could solve it.\n    #see an example of the problem here: http://jsfiddle.net/N5ymb/\n    #one hack/fix would be to add dummy points to the middle of the line that show up when moused over\n    b$tooltip(snap=5, useHTML = T, formatter = \"#! function() { return this.point.name; } !#\") #followTouchMove = T, shared=T, followPointer = T\n    b$exporting(enabled=TRUE,filename='zoomChart',sourceWidth=2000)\n    b$credits(enabled=TRUE)\n    b$set(dom = 'zChart')\n    return(b)\n  })#end zchart\n    \n  #highcharts test chart\n  output$testChart <- renderChart({\n    h1 <- hPlot(x = \"Wr.Hnd\", y = \"NW.Hnd\", data = MASS::survey, type = c(\"line\", \n                                                                          \"bubble\", \"scatter\"), group = \"Clap\", size = \"Age\")\n    h1$set(dom = 'testChart')\n    return(h1)     \n  })\n  \n  #return color table (which sets colors for series in charts) up to date with all combinations of traits\n  #this uses allColors set up in global, colors will repeat after 30series\n   colorTable <- reactive({     \n     traitVals <- list()\n     if(input$plotAll == FALSE){\n       for(i in input$traitColumns){\n         traitVals[[i]] <- input[[i]]\n       }     \n       \n       traits <- do.call(paste,c(expand.grid(traitVals),sep=\"_\"))     \n       if(length(traits)==0){return(NULL)}\n       \n       colorTable <- data.frame(trait=traits,color=rep(allColors,ceiling(length(traits)/30))[1:length(traits)])\n     }else{\n       colorTable <- data.frame(trait=input$datasets,color=allColors[1])\n     }\n     colorTable\n   })\n   \n   observe({     \n    if(is.null(input$SubmitColsButton) || input$SubmitColsButton == 0){return()}\n    isolate({\n      currDatasetProp <- datasetProp()\n      #print(\"before\")\n      #print(currDatasetProp)\n      if(as.character(input$datasets) %in% currDatasetProp$dataset){\n        currDatasetProp <- currDatasetProp[currDatasetProp$dataset != as.character(input$datasets),]\n      }\n      #print(\"after\")\n      #print(currDatasetProp)\n      cols <- varnames()\n      #print(\"data.frame\")\n      #print(data.frame(dataset=input$datasets,chrColumn=names(cols[cols==input$chrColumn]),bpColumn=names(cols[cols==input$bpColumn]),\n      #                 traitCol=paste(names(cols[cols %in% input$traitColumns]),collapse=\";\"),yAxisColumn=names(cols[cols==input$yAxisColumn]),axisLim=input$axisLimBool,axisMin=input$axisMin,axisMax=input$axisMax,stringsAsFactors=FALSE))\n      currDatasetProp <-  rbind(currDatasetProp,data.frame(dataset=input$datasets,chrColumn=names(cols[cols==input$chrColumn]),bpColumn=names(cols[cols==input$bpColumn]),\n                                                  traitCol=paste(names(cols[cols %in% input$traitColumns]),collapse=\";\"),yAxisColumn=names(cols[cols==input$yAxisColumn]),\n                                                  axisLim=input$axisLimBool,axisMin=input$axisMin,axisMax=input$axisMax,organism=input$organism,plotAll=input$plotAll,\n                                                  supportInterval=input$supportInterval,SIyAxisColumn=input$SIyAxisColumn,SIbpStart=input$SIbpStart,SIbpEnd=input$SIbpEnd,\n                                                  SIaxisLimBool=input$SIaxisLimBool,SIaxisMin=input$SIaxisMin,SIaxisMax=input$SIaxisMax,stringsAsFactors=FALSE))      \n      #print(\"rbind\")\n      #print(currDatasetProp)\n      write.table(file=\"./www/config/datasetProperties.csv\",x=currDatasetProp,col.names=TRUE,row.names=FALSE,sep=\",\")\n      updateTabsetPanel(session, \"datatabs\", selected = \"panel1\")\n     })\n#    if(input$selected != 1e5){\n#      updateTabsetPanel(session, \"datatabs\", selected = \"panel1\")  \n#    }\n   })\n  \n   observe({\n     if(is.null(input$saveDatasetButton) || input$saveDatasetButton == 0){return()}\n       isolate({\n          if(!file.exists(paste0(\"./www/config/data/\",input$datasets))){\n            write.table(getdata(),paste0(\"./www/config/data/\",input$datasets),sep=\",\",col.names=TRUE,row.names=FALSE) \n          }\n       })\n   })\n   \n   datasetProp <- function(){\n     return(read.table(\"./www/config/datasetProperties.csv\",sep=\",\",head=TRUE,stringsAsFactors=FALSE))\n   }\n   #this provides the functionality to update the plotband window after a user clicks without rerendering the whole plot\n   #From:\n   #http://stackoverflow.com/questions/20247759/add-highcharts-plotband-after-render-in-r-shiny-rcharts/20249933?noredirect=1#20249933\n   observe({\n    center <- as.numeric(input$selected[[1]])\n    winHigh <- center + input$window[1]\n    winLow <- center - input$window[1]\n    #eventually I would use winLow/winHigh to change the plotband range\n    band = list(from = winLow, to = winHigh, color = \"rgba(68, 170, 213, 0.4)\")\n    #print(band)\n    session$sendCustomMessage(type = \"customMsg\", band)\n   })  \n  \n#  observe({\n#     print(input$datatabs)     \n#  })\n})#end server\n",
    "created" : 1409165499183.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3541791716",
    "id" : "B497180F",
    "lastKnownWriteTime" : 1409694600,
    "path" : "~/Dropbox/GWASbrowser/interactiveGWASuploadable/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}